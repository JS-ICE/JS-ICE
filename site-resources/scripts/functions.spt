// functions for JS-ICE
// gets and returns the symmetry operation names (e.g. "identity") 
//not really necessary for current functionality but nice to have 
//only functional in jsmol as jsice cannot read spacegroupInfo.operations
function readSymmetryNames() {
	var allSymopInfo = _M.getProperty("spacegroupInfo.operations");
	var numSymops = allSymopInfo.length;
	var symopNameArray = [];
	for (var i = 1; i<= numSymops;i++){
		var symopCurrent = allSymopInfo[i];
		var currentName = symopCurrent[3];
		symopNameArray[i] = currentName;
	}
	return symopNameArray
}
// gets and returns the symmetry operation vector (as in "x,y,z" for identity are so forth) names 
function readSymmetryVectors() {
	var symopVectorArray = [];
	if (_M.fileSymmetryOperations)
		{symopVectorArray = _M.fileSymmetryOperations 
	}
	else {
		var symopArray = _M.getProperty("spacegroupInfo.symmetryInfo");
		var totalChars = symopVectorArray.length;
		var currentSymop = 1;
		for (var i = 1; i<= totalChars-2; i++){
			currentSymopName = currentSymop+"";
			if (currentSymopName == symopArray[i] && "\t" == symopArray[i+1]){
				var vectorString = symopArray[i+2]+symopArray[i+3]+symopArray[i+4]+symopArray[i+5]+symopArray[i+6]+symopArray[i+7]+symopArray[i+8]+symopArray[i+9]+symopArray[i+10]+symopArray[i+11]+symopArray[i+12]+symopArray[i+13]+symopArray[i+14]+symopArray[i+15]
				vectorString = vectorString.substring(0,vectorString.indexOf(" "))
				symopVectorArray[currentSymop] = vectorString;
				currentSymop = currentSymop + 1;
			}
		}
	}	
	return symopVectorArray
}
 

// returns the points given after performing a symmetry operation a chosen number of times (one point per operation
function getSymmetricAtomArray(symopSelected,point,iterations){
	var symAtomArray = [];
	for (var i = 1; i<= iterations;i++) {
		if (i=1){
			var output = all.symop(symopSelected,point)
			symAtomArray[i] = output; 
			}
		else {
			var output = all.symop(symopSelected[i-1],point)
			symAtomArray[i] = output;
		}	

	}
	return symAtomArray 
}
// adds new element by appending an element and then deleting the newly-created bond
// needs significant work such that elements that should be strings are strings and that code runs out of javascript and not just jmol script editor
// A.S. 10.24.18 
//

function appendNewAtom(elementName, point) {
	assign atom ({0}) @elementName @point //appends new atom, connected to a base atom in original structure 
	connect @{{*}[0]} delete
//	var bondNumber =  getProperty("modelInfo.models[1].bondCount")
//	var bondNumberString  = "[{"+bondNumber+"}]"
//	assign bond @bondNumberString "0" //removes just-added bond--has unintended consequences 
} 
// takes a given point and add the elements provided to it by a symmetry operation
// symmetry operations with multiple outputs (e.g. C3) will produce multiple symmetry atoms 





